var lsysUtils = require.call(null, __ROOT + '/utils.js');
var render = require.call(null, __ROOT + '/render.js');
var THREE = require.call(null, 'three');
var Tensor = require.call(null, 'adnn/tensor');
var ad = require.call(null, 'adnn/ad');
var nn = require.call(null, 'adnn/nn');


// ----------------------------------------------------------------------------
// Utilities


var vec2 = function(x, y) {
	var v = Object.create(THREE.Vector2.prototype);
	THREE.Vector2.call(v, x, y);
	return v;
};

var box2 = function() {
	var b = Object.create(THREE.Box2.prototype);
	THREE.Box2.call(b);
	return b;
};

var tensor = function(dims) {
	var x = Object.create(Tensor.prototype);
	Tensor.call(x, dims);
	return x;
};

var polar2rect = function(r, theta) {
	return vec2(r*Math.cos(theta), r*Math.sin(theta));
};

var fuzz = [0, 1e-8];
var normalize = function(x, lo, hi) {
	// Fuzz prevents values from normalizing to exactly zero (causing zero
	//    derivatives)
	return (2 * (x - lo) / (hi - lo)) - 1 + gaussianERP.sample(fuzz);
};

var TWOPI = 2*Math.PI;
var normang = function(theta) {
	if (theta >= 0) {
		return theta - (TWOPI*Math.floor(theta / TWOPI));
	} else {
		return theta - (TWOPI*Math.ceil(theta / TWOPI)) + TWOPI;
	}
};


// ----------------------------------------------------------------------------
// Other globals


var viewport = {xmin: -12, xmax: 12, ymin: -22, ymax: 2};

var targetDB = lsysUtils.newTargetImageDatabase('targets/training');

// var futurePolicy = 'immediate';
// var futurePolicy = 'lifo';
// var futurePolicy = 'fifo';
// var futurePolicy = 'uniformFromAll';
var futurePolicy = 'uniformFromDeepest';
// var futurePolicy = 'depthWeighted';
setFuturePolicy(futurePolicy);


// ----------------------------------------------------------------------------
// Factor encouraging similarity to target image


// Compute normalized similarity for a set of branches
var computeSim = function(branches, inInference) {
	var target = globalStore.target;
	// If not in inference, just render everything
	if (!inInference) {
		render.render(target.canvas, viewport, branches);
	// Otherwise, do an incremental render of the last branch
	} else {
		globalStore.genImg.copyToCanvas(target.canvas);
		render.render(target.canvas, viewport, branches, true, false);
	}
	globalStore.genImg = lsysUtils.newImageData2D().loadFromCanvas(target.canvas);
	return lsysUtils.normalizedSimilarity(globalStore.genImg, globalStore.target);
};

// Basically Gaussian log-likelihood, without the constant factor
var makescore = function(val, target, tightness) {
	var diff = val - target;
	return - (diff * diff) / (tightness * tightness);
}

var simTightness = 0.02;
var boundsTightness = 0.001;
var availableFuturesWeight = 25;
var targetFactor = function() {
	// Similarity factor
	var sim = computeSim(globalStore.branches, true);
	globalStore.sim = sim;
	var simf = makescore(sim, 1, simTightness);
	// Bounds factors
	var bbox = globalStore.bbox;
	var extraX = (Math.max(viewport.xmin - bbox.min.x, 0) + Math.max(bbox.max.x - viewport.xmax, 0)) / (viewport.xmax - viewport.xmin);
	var extraY = (Math.max(viewport.ymin - bbox.min.y, 0) + Math.max(bbox.max.y - viewport.ymax, 0)) / (viewport.ymax - viewport.ymin);
	var boundsfx = makescore(extraX, 0, boundsTightness);
	var boundsfy = makescore(extraY, 0, boundsTightness);
	var f = simf + boundsfx + boundsfy;
	// ////
	// // More available futures factor
	// var fprime = simf + boundsfx + boundsfy;
	// var f = fprime + availableFuturesWeight*availableFuturesScore();
	// ////
	if (globalStore.prevFactor) {
		factor(f - globalStore.prevFactor);
	} else {
		factor(f);
	}
	globalStore.prevFactor = f;
};


// ----------------------------------------------------------------------------
// Neural network guide stuff


var netwrapper = function(fn) {
	return function() {
		var net = fn.apply(null, arguments);
		registerVariationalParams(net.parameters);
		net.setTraining(true);
		return net;
	};
};

var nLocalFeatures = 4;
var nTargetFeatures = 10;
var nStateFeatures = 10;

// Convolutional network that parses the target image.
var makeTargetCNN = netwrapper(function() {
	//
});

// Recurrent network that tracks latent global state.
var makeInitState = netwrapper(function() {
	var net = nn.constantparams([nStateFeatures]);
	registerVariationalParams(net.parameters);
	net.setTraining(true);
	return net;
});
var makeStateRNN = netwrapper(function() {
	// Currently just one linear layer + nonlinearity
	var localInput = nn.ast.input();
	var latentInput = nn.ast.input();
	var concatNode = nn.concat.compose(localInput, latentInput);
	var nIn = nLocalFeatures + nStateFeatures;
	var linearNode = nn.linear(nIn, nStateFeatures).compose(concatNode);
	var tanhNode = nn.tanh.compose(linearNode);
	return nn.ast.compile([localInput, latentInput], [tanhNode]);
});

// Per-callsite MLPs that combine target state and latent state with
//    current local features.
var makeParamPredictMLP = netwrapper(function(nOut) {
	// Currently just one linear layer + nonlinearity
	var localInput = nn.ast.input();
	var latentInput = nn.ast.input();
	var targetInput = nn.ast.input();
	var concatNode = nn.concat.compose(localInput, latentInput, targetInput);
	var nIn = nLocalFeatures + nStateFeatures + nTargetFeatures;
	var linearNode = nn.linear(nIn, nOut).compose(concatNode);
	var tanhNode = nn.tanh.compose(linearNode);
	return nn.ast.compile([localInput, latentInput, targetInput], [tanhNode]);
});

var neuralNetwork = cache(function() {
	var id = arguments[0];
	if (id === 'targetCNN') {
		return makeTargetCNN();
	} else if (id === 'stateInit') {
		return makeInitState();
	} else if (id === 'stateRNN') {
		return makeStateRNN();
	} else {
		var nOut = arguments[1];
		return makeParamPredictMLP(nOut);
	}
});


// ----------------------------------------------------------------------------
// The program itself


var makeProgram = function(neurallyGuided) {

	// Set up ERPs (either normal or neurally-guided)
	var makeSampler = function(erpName, bounds) {
		var erp = global[erpName];
		var verp = Variational[erpName];
		var n = bounds.length;
		return !neurallyGuided ? 
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			return sample(erp, params);
		}
		:
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			var localState = arguments[n];
			var name = arguments[n+1];	// TODO: replace with callsite id
			var vparams = neuralNetwork(name, n).eval(
				localState.features, globalStore.stateFeatures, globalStore.targetFeatures
			);
			var scalarizedParams = ad.tensorToScalars(vparams);
			var finalParams = mapIndexed(function(p, i) {
				return bounds[i] ? ad.scalar[bounds[i]](p) : p;
			}, scalarizedParams);
			verp.importanceERP.setParams(vparams);
			return sample(verp, params);
		};
	};
	var _gaussian = makeSampler('gaussianERP', [undefined, 'exp']);
	var _flip = makeSampler('bernoulliERP', ['sigmoid']);


	var initialWidth = 0.75;
	var widthDecay = 0.975;
	var minWidthPercent = 0.2;
	var minWidth = minWidthPercent*initialWidth;

	var state = function(obj) {
		var features = tensor([4]).fromFlatArray([
			normalize(obj.pos.x, viewport.xmin, viewport.xmax),
			normalize(obj.pos.y, viewport.ymin, viewport.ymax),
			normalize(obj.width, minWidth, initialWidth),
			normalize(normang(obj.angle), 0, TWOPI)
		]);
		return {
			depth: obj.depth,
			pos: obj.pos,
			angle: obj.angle,
			width: obj.width,
			features: features
		};
	};

	var branch = function(currState) {

		// Generate new branch
		var width = widthDecay * currState.width;
		var length = 2;
		var newang = currState.angle + gaussian(0, Math.PI/8);	
		var newbranch = {
			start: currState.pos,
			angle: newang,
			width: width,
			end: currState.pos.clone().add(polar2rect(length, newang))
		};

		// Update model state
		globalStore.branches = { branch: newbranch, next: globalStore.branches };
		globalStore.numBranches = globalStore.numBranches + 1;
		globalStore.bbox = globalStore.bbox.clone();
		globalStore.bbox.expandByPoint(newbranch.start);
		globalStore.bbox.expandByPoint(newbranch.end);

		// Add new heuristic factor
		targetFactor();

		var newState = state({
			depth: currState.depth + 1,
			pos: newbranch.end,
			angle: newbranch.angle,
			width: newbranch.width
		});

		if (neurallyGuided)  {
			globalStore.stateFeatures = neuralNetwork('stateRNN').eval(
				newState.features, globalStore.stateFeatures);
		}

		// Terminate?
		future(function() {
			var terminateProb = 0.5;
			if (flip(terminateProb)) {
				globalStore.terminated = true;
			} else {
				// Generate no further branches w/ prob 1/3
				// Generate one further branch w/ prob 1/3
				// Generate two further branches w/ prob 1/3
				future(function() {
					if (!globalStore.terminated && newState.width > minWidth && flip(0.66)) {
						branch(newState);
						future(function() {
							if (!globalStore.terminated && newState.width > minWidth && flip(0.5)) {
								branch(newState);
							}
							// else factor(0);
						});
					}
					// else factor(0);
				});
			}
		});
	};

	var generate = function() {
		// If target is not fixed, then marginalize over targets
		if (globalStore.target === undefined) {
			globalStore.target = targetDB.getTargetByIndex(randomInteger(targetDB.numTargets()));
		}
		if (neurallyGuided) {
			globalStore.targetFeatures = neuralNetwork('targetCNN').eval(globalStore.target.tensor);
			globalStore.stateFeatures = neuralNetwork('initState').eval();
		}
		var w = globalStore.target.image.width;
		var h = globalStore.target.image.height;
		globalStore.genImg = lsysUtils.newImageData2D().fillWhite(w, h);
		globalStore.branches = undefined;
		globalStore.numBranches = 0;
		globalStore.bbox = box2();
		globalStore.currFeatures = [];
		var startState = state({
			depth: 0,
			pos: vec2(0, 0),
			angle: gaussian(-Math.PI/2, Math.PI/6),
			width: initialWidth
		});
		future(function() { branch(startState); });
		finishAllFutures();
		return globalStore.branches;
	};

	return generate;
}


// ----------------------------------------------------------------------------
// Return stuff that external tasks will need


var rets = {
	generate: makeProgram(false),
	generatedGuided: makeProgram(true),
	targetDB: targetDB,
	viewport: viewport,
	globalStore: globalStore,
	neuralNets: neuralNetwork.cache,
	environment: env
};
rets;





