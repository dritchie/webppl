var fs = require.call(null, 'fs');
var THREE = require.call(null, 'three');
var lsysUtils = require.call(null, 'variational_experiments/lsystem/utils.js');
var utils = require.call(null, 'variational_experiments/utils.js');
var verp = require.call(null, 'variational_experiments/erp.js');


// ----------------------------------------------------------------------------


var vec2 = function(x, y) {
	var v = Object.create(THREE.Vector2.prototype);
	THREE.Vector2.call(v, x, y);
	return v;
}

var box2 = function() {
	var b = Object.create(THREE.Box2.prototype);
	THREE.Box2.call(b);
	return b;
}

var polar2rect = function(r, theta) {
	return vec2(r*Math.cos(theta), r*Math.sin(theta));
}


// ----------------------------------------------------------------------------


var viewport = {xmin: -12, xmax: 12, ymin: -22, ymax: 2};

var targetDB = lsysUtils.newTargetImageDatabase('variational_experiments/lsystem/targets/training');

// var futurePolicy = 'immediate';
// var futurePolicy = 'lifo';
// var futurePolicy = 'fifo';
// var futurePolicy = 'uniformFromAll';
var futurePolicy = 'uniformFromDeepest';
// var futurePolicy = 'depthWeighted';
setFuturePolicy(futurePolicy);


// ----------------------------------------------------------------------------


// Compute normalized similarity for a set of branches
var computeSim = function(branches, inInference) {
	var target = globalStore.target;
	// If not in inference, just render everything
	if (!inInference) {
		lsysUtils.render(target.canvas, viewport, branches);
	// Otherwise, do an incremental render of the last branch
	} else {
		if (globalStore.genImg !== undefined) {
			globalStore.genImg.copyToCanvas(target.canvas);
		}
		lsysUtils.render(target.canvas, viewport, branches, true, globalStore.genImg === undefined);
	}
	globalStore.genImg = lsysUtils.newImageData2D().loadFromCanvas(target.canvas);
	return lsysUtils.normalizedSimilarity(globalStore.genImg, globalStore.target);
};

// Basically Gaussian log-likelihood, without the constant factor
var makescore = function(val, target, tightness) {
	var diff = val - target;
	return - (diff * diff) / (tightness * tightness);
}

var simTightness = 0.02;
var boundsTightness = 0.001;
var availableFuturesWeight = 25;
var targetFactor = function() {
	// Similarity factor
	var sim = computeSim(globalStore.branches, true);
	globalStore.sim = sim;
	var simf = makescore(sim, 1, simTightness);
	// Bounds factors
	var bbox = globalStore.bbox;
	var extraX = (Math.max(viewport.xmin - bbox.min.x, 0) + Math.max(bbox.max.x - viewport.xmax, 0)) / (viewport.xmax - viewport.xmin);
	var extraY = (Math.max(viewport.ymin - bbox.min.y, 0) + Math.max(bbox.max.y - viewport.ymax, 0)) / (viewport.ymax - viewport.ymin);
	var boundsfx = makescore(extraX, 0, boundsTightness);
	var boundsfy = makescore(extraY, 0, boundsTightness);
	var f = simf + boundsfx + boundsfy;
	// ////
	// // More available futures factor
	// var fprime = simf + boundsfx + boundsfy;
	// var f = fprime + availableFuturesWeight*availableFuturesScore();
	// ////
	if (globalStore.prevFactor) {
		factor(f - globalStore.prevFactor);
	} else {
		factor(f);
	}
	globalStore.prevFactor = f;
};


// ----------------------------------------------------------------------------


var makeProgram = function(inOpts) {

	var opts = inOpts || {};
	var mode = opts.mode || 'normal';

	var makeSampler = function(erp, name) {
		if (mode === 'normal') {
			return function(params) {
				return sample(erp, params);
			};
		} else if (mode === 'processData') {
			return function(params) {
				// Do stuff to save data
				return sample(erp, params);
			};
		} else if (mode === 'variational') {
			return function(params) {
				var addr = currentAddress();
				var callsite = addr.slice(addr.lastIndexOf('_'));
				// Retrieve appropriate neural network given this
				//    callsite, use that to predict params
				var nnparams = []; 	// TODO
				var variationalErp = verp[name];
				variationalErp.importanceERP.setParams(nnparams);
				return sample(variationalErp, params);
			};
		}
	}

	var _gaussianSampler = makeSampler(gaussianERP, 'gaussianERP');
	var _gaussian = function(mu, sigma) { return _gaussianSampler([mu, sigma]); };
	var _flipSampler = makeSampler(bernoulliERP, 'bernoulliERP');
	var _flip = function(p) { return _flipSampler([p]); };

	var setCurrFeatures = function(currState) {
		globalStore.currFeatures = [
			currState.pos.x,
			currState.pos.y,
			currState.depth,
			currState.ang
		];
	};


	var initialWidth = 0.75;
	var widthDecay = 0.975;
	var minWidthPercent = 0.2;

	var branch = function(currState) {
		if (mode === 'processData') {
			setCurrFeatures(currState);
		}

		// Generate new branch
		var width = widthDecay * currState.width;
		var length = 2;
		var newang = currState.angle + _gaussian(0, Math.PI/8);	
		var newbranch = {
			start: currState.pos,
			angle: newang,
			width: width,
			end: currState.pos.clone().add(polar2rect(length, newang))
		};

		// Update model state
		globalStore.branches = { branch: newbranch, next: globalStore.branches };
		globalStore.numBranches = globalStore.numBranches + 1;
		globalStore.bbox = globalStore.bbox.clone();
		globalStore.bbox.expandByPoint(newbranch.start);
		globalStore.bbox.expandByPoint(newbranch.end);

		// Add new heuristic factor
		targetFactor();

		var newState = {
			depth: currState.depth + 1,
			pos: newbranch.end,
			angle: newbranch.angle,
			width: newbranch.width
		};

		// Terminate?
		future(function() {
			var terminateProb = 0.5;
			if (_flip(terminateProb)) {
				globalStore.terminated = true;
			} else {
				// Generate no further branches w/ prob 1/3
				// Generate one further branch w/ prob 1/3
				// Generate two further branches w/ prob 1/3
				future(function() {
					if (!globalStore.terminated && newState.width/initialWidth > minWidthPercent && _flip(0.66)) {
						branch(newState);
						future(function() {
							if (!globalStore.terminated && newState.width/initialWidth > minWidthPercent && _flip(0.5)) {
								branch(newState);
							}
							// else factor(0);
						});
					}
					// else factor(0);
				});
			}
		});
	};

	var generate = function() {
		// If target is not fixed, then marginalize over targets
		if (globalStore.target === undefined) {
			globalStore.target = targetDB.getTargetByIndex(randomInteger(targetDB.numTargets()));
		}
		globalStore.branches = undefined;
		globalStore.numBranches = 0;
		globalStore.bbox = box2();
		var startState = {
			depth: 0,
			pos: vec2(0, 0),
			angle: _gaussian(-Math.PI/2, Math.PI/6),
			width: initialWidth
		};
		future(function() { branch(startState); });
		finishAllFutures();
		return globalStore.branches;
	};

	return generate;
}


// ----------------------------------------------------------------------------


var generateTrainingData = function(name) {
	var present = { present: require.call(null, 'present') };	// For timing
	var dataDir = 'variational_experiments/lsystem/synth_data';
	if (!fs.existsSync(dataDir)) {
		fs.mkdirSync(dataDir);
	}
	var filename = dataDir + '/' + name + '.txt';
	var genFn = makeProgram();
	var t0 = present.present();
	var genData = function(counter) {
		// Generate for a random target, recording the target index as the first
		//    random choice in the trace so that playback can work correctly.
		var targetIdx = randomInteger(targetDB.numTargets()); 
		globalStore.target = targetDB.getTargetByIndex(targetIdx);
		var MAPtrace = ParticleFilter(genFn, 300).MAPparticle.trace;
		var outTrace = [targetIdx].concat(MAPtrace);
		fs.appendFileSync(filename, JSON.stringify(outTrace) + '\n');
		var t = present.present();
		var rate = counter / ((t - t0)/60000);
		console.log('Generated trace ' + counter + ' (curr avg rate: ' + rate + ' per min)');
		genData(counter + 1);
	}
	genData(1);
};


// TODO: Update this to work with externally-trained networks
///////////////////////////////////////////////////////////////////////////////
// var compareVariationalToPrior = function(paramFile) {
// 	var present = { present: require.call(null, 'present') };	// For timing
// 	var util = require.call(null, 'util');
// 	var outfilename = targetName + '_comparison.csv';
// 	var outfile = fs.openSync('variational_experiments/lsystem/analysis/'+outfilename, 'w');
// 	fs.writeSync(outfile, 'isVariational,numParticles,sim,time,avgTime\n');
// 	var nReps = 100;
// 	map(function(isVariational) {
// 		console.log('isVariational = ' + isVariational);
// 		var genFn = makeProgram(isVariational);
// 		if (isVariational) Variational.loadParams(vparams, paramFile);
// 		repeat(10, function(np) {
// 			var nParticles = np + 1;
// 			console.log('  nParticles = ' + nParticles);
// 			var simsAndTimes = repeat(nReps, function(i) {
// 				console.log('    repetition ' + i);
// 				globalStore.target = targetDB.getTargetByIndex(randomInteger(targetDB.numTargets()));
// 				var t0 = present.present();
// 				var ret = ParticleFilter(genFn, nParticles).MAPparticle.value;
// 				var t1 = present.present();
// 				var time = t1 - t0;
// 				var sim = computeSim(ret);
// 				return [sim, time];
// 			});
// 			var times = map(function(st) { return st[1]; }, simsAndTimes);
// 			var avgTime = sum(times) / times.length;
// 			map(function(st) {
// 				fs.writeSync(outfile, util.format('%s,%d,%d,%d,%d\n',
// 					isVariational, nParticles, st[0], st[1], avgTime));
// 			}, simsAndTimes);
// 		});
// 	}, [false, true]);
// 	fs.closeSync(outfile);
// }


var serverReponse = function() {
	// var targetName = 'curl';
	// var targetName = 'bifurcate';
	// var targetName = 'a';
	var targetName = 'heart';
	// var targetName = 'manybranch_3';
	// var targetName = 'manybranch_4';
	// var targetName = 'manybranch_7';
	// var targetName = 'snake_3';
	// var targetName = 'spiral';
	// var targetName = 't';
	globalStore.target = targetDB.getTargetByName(targetName);

	var particleHistoryUtils = require.call(null, 'variational_experiments/lsystem/particleHistoryUtils');
	var saveHistory = lsysUtils.deleteStoredImages;
	var nParticles = 300;
	var genFn = makeProgram();
	var particleHistory = ParticleFilter(genFn, nParticles, true, saveHistory).particleHistory;
	return {
		targetName: targetName,
		viewport: viewport,
		history: particleHistoryUtils.compress(particleHistory)
	};
}


// ----------------------------------------------------------------------------


var experimentName = 'allTargets_' + futurePolicy;
var dataFileName = 'variational_experiments/lsystem/synth_data/' + experimentName + '.txt'

serverReponse();
// generateTrainingData(experimentName);





