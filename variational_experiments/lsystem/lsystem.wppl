var utils = require.call(null, __ROOT + '/../utils.js');
var lsysUtils = require.call(null, __ROOT + '/utils.js');
var render = require.call(null, __ROOT + '/render.js');
var nnarch = require.call(null, __ROOT + '/nnarch');
var _ = require.call(null, 'underscore');
var THREE = require.call(null, 'three');
var ad = require.call(null, 'adnn/ad');


// ----------------------------------------------------------------------------
// Globals / constants


var viewport = {xmin: -12, xmax: 12, ymin: -22, ymax: 2};

var targetDB = utils.new(lsysUtils.TargetImageDatabase, __ROOT + '/targets/training');

// var futurePolicy = 'immediate';
// var futurePolicy = 'lifo';
// var futurePolicy = 'fifo';
// var futurePolicy = 'uniformFromAll';
var futurePolicy = 'uniformFromDeepest';
// var futurePolicy = 'depthWeighted';
setFuturePolicy(futurePolicy);

// Uncomment these if you want to generate samples from the prior
// globalStore.noFactors = true;
// globalStore.sim = 0;


// ----------------------------------------------------------------------------
// Factor encouraging similarity to target image


// Save rendered image so far to imagesSoFar directory 
var saveImageSoFar = false;

// Compute normalized similarity for a set of branches
var computeSim = function(branches, inInference) {
	var target = globalStore.target;
	// If not in inference, just render everything
	if (!inInference) {
		render.renderLineSegs(target.canvas, viewport, branches);
	// Otherwise, do an incremental render of the last branch
	} else {
		globalStore.genImg.copyToCanvas(target.canvas);
		render.renderLineSegs(target.canvas, viewport, branches, true, false);
	}
	globalStore.genImg = utils.new(lsysUtils.ImageData2D).loadFromCanvas(target.canvas);
	// Save?
	if (saveImageSoFar) {
		globalStore.genImg.saveToFile(__ROOT + '/imagesSoFar/img_' + (globalStore.branches.n).toString() + '.png');
	}
	return lsysUtils.normalizedSimilarity(globalStore.genImg, globalStore.target);
};

// Basically Gaussian log-likelihood, without the constant factor
var makescore = function(val, target, tightness) {
	var diff = val - target;
	return - (diff * diff) / (tightness * tightness);
}

var simTightness = 0.02;
var boundsTightness = 0.001;
var availableFuturesWeight = 25;
var targetFactor = function() {
	// Similarity factor
	var sim = computeSim(globalStore.branches, true);
	globalStore.sim = sim;
	var simf = makescore(sim, 1, simTightness);
	// Bounds factors
	var bbox = globalStore.bbox;
	var extraX = (Math.max(viewport.xmin - bbox.min.x, 0) + Math.max(bbox.max.x - viewport.xmax, 0)) / (viewport.xmax - viewport.xmin);
	var extraY = (Math.max(viewport.ymin - bbox.min.y, 0) + Math.max(bbox.max.y - viewport.ymax, 0)) / (viewport.ymax - viewport.ymin);
	var boundsfx = makescore(extraX, 0, boundsTightness);
	var boundsfy = makescore(extraY, 0, boundsTightness);
	var f = simf + boundsfx + boundsfy;
	// ////
	// // More available futures factor
	// var fprime = simf + boundsfx + boundsfy;
	// var f = fprime + availableFuturesWeight*availableFuturesScore();
	// ////
	if (globalStore.prevFactor) {
		factor(f - globalStore.prevFactor);
	} else {
		factor(f);
	}
	globalStore.prevFactor = f;
};


// ----------------------------------------------------------------------------
// The program itself


var makeProgram = function(neurallyGuided) {

	// Set up ERPs (either normal or neurally-guided)
	var makeSampler = function(erpName, bounds) {
		var erp = global[erpName + 'ERP'];
		var verp = withImportanceDist(erp, Variational[erpName + 'ERP']);
		var n = bounds.length;
		return !neurallyGuided ? 
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			return sample(erp, params);
		}
		:
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			var localState = arguments[n];
			var name = arguments[n+1];	// TODO: replace with callsite id?
			var vparams = globalStore.nnGuide.predict(globalStore, localState, name, bounds);
			verp.importanceERP.setParams(vparams);
			return sample(verp, params);
		};
	};
	var makeMixtureSampler = function(erpName, nComps, bounds) {
		var erp = global[erpName + 'ERP'];
		var verp = withImportanceDist(erp, Variational[erpName + 'MixtureERP']);
		var n = bounds.length;
		// Keep weights between [0,1] (only need to keep them nonnegative, but I think
		//    this will help keep things regularized...)
		var weightBounds = repeat(nComps, function() { return ad.scalar.sigmoid; });
		var paramBounds = repeat(nComps, function() { return bounds; });
		var allBounds = weightBounds.concat(flatten(paramBounds));
		return !neurallyGuided ?
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			return sample(erp, params);
		}
		:
		function() {
			var params = Array.prototype.slice.call(arguments, 0, n);
			var localState = arguments[n];
			var name = arguments[n+1];	// TODO: replace with callsite id?
			var vparams = globalStore.nnGuide.predict(globalStore, localState, name, allBounds);
			var ws = vparams.slice(0, nComps);
			var ps = group(vparams.slice(nComps), n);
			verp.importanceERP.setParams([ws, ps]);
			return sample(verp, params);
		}
	};
	// var _gaussian = makeSampler('gaussian', [undefined, ad.scalar.exp]);
	var _gaussian = makeMixtureSampler('gaussian', 4, [undefined, ad.scalar.exp]);
	var _flip = makeSampler('bernoulli', [ad.scalar.sigmoid]);


	var initialWidth = 0.75;
	var widthDecay = 0.975;
	var minWidthPercent = 0.2;
	var minWidth = minWidthPercent*initialWidth;

	var state = function(obj) {
		return {
			depth: obj.depth,
			pos: obj.pos,
			angle: obj.angle,
			width: obj.width,
			prevBranches: obj.prevBranches,
			features: neurallyGuided ? globalStore.nnGuide.localFeatures(obj) : undefined
		};
	};

	var polar2rect = function(r, theta) {
		return utils.new(THREE.Vector2, r*Math.cos(theta), r*Math.sin(theta));
	};

	var branch = function(currState) {

		// Generate new branch
		var width = widthDecay * currState.width;
		var length = 2;
		var newang = currState.angle + _gaussian(0, Math.PI/8, currState, 'angle');
		// var newang = _gaussian(currState.angle, Math.PI/8, currState, 'angle');
		var newbranch = {
			start: currState.pos,
			angle: newang,
			width: width,
			end: currState.pos.clone().add(polar2rect(length, newang))
		};

		// Update model state
		globalStore.branches = {
			branch: newbranch,
			next: globalStore.branches,
			parent: currState.prevBranches,
			n: globalStore.branches ? globalStore.branches.n + 1 : 1
		};
		globalStore.bbox = globalStore.bbox.clone();
		globalStore.bbox.expandByPoint(newbranch.start);
		globalStore.bbox.expandByPoint(newbranch.end);

		// Add new heuristic factor
		if (!globalStore.noFactors) targetFactor();

		var newState = state({
			depth: currState.depth + 1,
			pos: newbranch.end,
			angle: newbranch.angle,
			width: newbranch.width,
			prevBranches: globalStore.branches
		});

		if (neurallyGuided) {
			globalStore.nnGuide.step(globalStore, newState);
		}

		// Terminate?
		future(function() {
			var terminateProb = 0.5;
			if (_flip(terminateProb, newState, 'terminate')) {
				globalStore.terminated = true;
			} else {
				// Generate no further branches w/ prob 1/3
				// Generate one further branch w/ prob 1/3
				// Generate two further branches w/ prob 1/3
				future(function() {
					if (!globalStore.terminated && newState.width > minWidth && _flip(0.66, newState, 'branch1')) {
						branch(newState);
						future(function() {
								if (!globalStore.terminated && newState.width > minWidth && _flip(0.5, newState, 'branch2')) {
								branch(newState);
							}
							// else factor(0);
						});
					}
					// else factor(0);
				});
			}
		});
	};

	var generate = function() {
		// Constants needed by the guide architecture
		if (neurallyGuided) {
			globalStore.nnGuide.constant('targetDB', targetDB);
			globalStore.nnGuide.constant('viewport', viewport);
			globalStore.nnGuide.constant('initialWidth', initialWidth);
			globalStore.nnGuide.constant('minWidth', minWidth);
		}
	
		// If target is not fixed, then marginalize over targets
		if (globalStore.target === undefined) {
			globalStore.target = targetDB.getTargetByIndex(randomInteger(targetDB.numTargets()));
		}
		var w = globalStore.target.image.width;
		var h = globalStore.target.image.height;
		globalStore.genImg = utils.new(lsysUtils.ImageData2D).fillWhite(w, h);

		if (neurallyGuided) {
			globalStore.nnGuide.init(globalStore);
		}
		
		globalStore.branches = undefined;
		globalStore.bbox = utils.new(THREE.Box2);

		// These are separated like this so that we can have an initial local
		//    state to feed to the _gaussian for the initial angle.
		var initState = state({
			depth: 0,
			pos: utils.new(THREE.Vector2, 0, 0),
			angle: 0,
			width: initialWidth,
			prevBranches: undefined
		});
		var startState = state({
			depth: initState.depth,
			pos: initState.pos,
			angle: _gaussian(-Math.PI/2, Math.PI/6, initState, 'startAngle'),
			width: initState.width,
			prevBranches: initState.prevBranches
		});

		future(function() { branch(startState); });
		finishAllFutures();

		return globalStore.branches;
	};

	return generate;
}


// ----------------------------------------------------------------------------
// Return stuff that external tasks will need


var rets = {
	generate: makeProgram(false),
	generateGuided: makeProgram(true),
	targetDB: targetDB,
	viewport: viewport,
	globalStore: globalStore,
	environment: env
};
rets;





