var THREE = require.call(null, 'three');
var lsysParams = require.call(null, 'vpf_experiments/lsystem/params.js');
var lsysUtils = require.call(null, 'vpf_experiments/lsystem/utils.js');
var bounds = require.call(null, 'src/bounds');
var utils = require.call(null, 'vpf_experiments/utils.js');

var vec2 = function(x, y) {
	var v = Object.create(THREE.Vector2.prototype);
	THREE.Vector2.call(v, x, y);
	return v;
}

var box2 = function() {
	var b = Object.create(THREE.Box2.prototype);
	THREE.Box2.call(b);
	return b;
}

var polar2rect = function(r, theta) {
	return vec2(r*Math.cos(theta), r*Math.sin(theta));
}


var viewport = {xmin: -12, xmax: 12, ymin: -22, ymax: 2};

var targetWidth = 8;
// var targetWidth = 15;
var targetYmax = 0;
var targetXcenter = 0;
var targetWidthTightness = targetWidth / 10;
// var targetWidthTightness = 0.8;
// var targetWidthTightness = 1.6;
// var targetWidthTightness = 0.4;
// var targetWidthTightness = 0.1;
// var targetYmaxTightness = 0.1;
var targetYmaxTightness = 0.2;
// var targetXcenterTightness = 0.1;
var targetXcenterTightness = 0.2;



var vparams = Variational.newParams();



var makeProgram = function(variational, heuristicFactors) {

	var targetFactor = function(mult) {
		var size = globalStore.bbox.size();
		var f = 
				gaussianERP.score([targetWidth, targetWidthTightness], size.x)
		        // + gaussianERP.score([targetYmax, targetYmaxTightness], globalStore.bbox.max.y)
		        // + gaussianERP.score([targetXcenter, targetXcenterTightness], globalStore.bbox.center().x);
		factor(mult * f);
	}

	// var _gaussian = gaussian;
	var _gaussian = !variational ? gaussian :
	function(mu, sigma) {
		var addr = currentAddress();
		var callsite = addr.slice(addr.lastIndexOf('_'));
		var bnds = [bounds.none, bounds.nonNegative];
		var features = globalStore.currFeatures;
		var origprms = [mu, sigma];
		var params = lsysParams.get(vparams, callsite, origprms, bnds, features);
		Variational.gaussianERP.importanceERP.setParams(params);
		return sample(Variational.gaussianERP, origprms);
	};

	// var _uniform = uniform;
	var _uniform = !variational ? uniform :
	function(lo, hi) {
		var addr = currentAddress();
		var callsite = addr.slice(addr.lastIndexOf('_'));
		var bnds = [bounds.nonNegative, bounds.nonNegative];
		var features = globalStore.currFeatures;
		var origprms = [1, 1];
		var params = lsysParams.get(vparams, callsite, origprms, bnds, features);
		Variational.betaERP.importanceERP.setParams(params);
		var t = sample(Variational.betaERP, origprms);
		return (1-t)*lo + t*hi;
	};

	// var _flip = flip;
	var _flip = !variational ? flip :
	function(p) {
		var addr = currentAddress();
		var callsite = addr.slice(addr.lastIndexOf('_'));
		var bnds = [bounds.unitInterval];
		var features = globalStore.currFeatures;
		var origprms = [p];
		var params = lsysParams.get(vparams, callsite, origprms, bnds, features);
		Variational.bernoulliERP.importanceERP.setParams(params);
		return sample(Variational.bernoulliERP, origprms);
	}


	var fuzz = [0, 1e-8];
	var normalize = function(x, lo, hi) {
		// Fuzz prevents values from normalizing to zero and causing zero derivatives.
		// Also might make learning a bit more robust(?)
		return (2 * (x - lo) / (hi - lo)) - 1 + gaussianERP.sample(fuzz);
		// return (x - lo) / (hi - lo) + gaussianERP.sample(fuzz);
	}
	var TWOPI = 2*Math.PI;
	var normang = function(theta) {
		if (theta >= 0) {
			return theta - (TWOPI*Math.floor(theta / TWOPI));
		} else {
			return theta - (TWOPI*Math.ceil(theta / TWOPI)) + TWOPI;
		}
	}
	var setCurrFeatures = function(currState) {
		var x = normalize(currState.pos.x, viewport.xmin, viewport.xmax);
		var y = normalize(currState.pos.y, viewport.ymin, viewport.ymax);
		var depth = normalize(currState.depth, 0, 5);
		var sang = Math.sin(currState.angle);
		var cang = Math.cos(currState.angle);
		var ang = normalize(normang(currState.angle), 0, TWOPI);
		var bb = globalStore.bbox;
		if (bb.empty()) {
			globalStore.currFeatures = [x, y, depth, ang, sang, cang];
		} else {
			var xmin = normalize(bb.min.x, viewport.xmin, viewport.xmax);
			var xmax = normalize(bb.max.x, viewport.xmin, viewport.xmax);
			var ymin = normalize(bb.min.y, viewport.ymin, viewport.ymax);
			var ymax = normalize(bb.max.y, viewport.ymin, viewport.ymax);
			globalStore.currFeatures = [x, y, depth, ang, sang, cang, xmin, xmax, ymin, ymax];
		}
	}

	var branch = function(currState, treeNode) {
		setCurrFeatures(currState);

		var width = 0.9 * currState.width;
		var length = 2;
		var newang = currState.angle + _gaussian(0, Math.PI/8);	
		// var newang = currState.angle + _uniform(-Math.PI/6, Math.PI/6);
		var newbranch = {
			start: currState.pos,
			angle: newang,
			width: width,
			end: currState.pos.clone().add(polar2rect(length, newang))
		};
		var newNode = { branch: newbranch, parent: treeNode, children: [] };
		if (treeNode === undefined) {
			globalStore.treeRoot = newNode;
		} else {
			treeNode.children.push(newNode);
		}

		if (heuristicFactors) {
			// Subtract previous heuristic factor
			if (globalStore.branches.length > 0) {
				targetFactor(-1);
			}
		}

		globalStore.branches = globalStore.branches.concat([newbranch]);
		globalStore.bbox = globalStore.bbox.clone();
		globalStore.bbox.expandByPoint(newbranch.start);
		globalStore.bbox.expandByPoint(newbranch.end);

		if (heuristicFactors) {
			// Add new heuristic factor
			targetFactor(1);
		}

		// Terminate?
		future(function() {
			if (currState.depth < 10 && _flip(Math.min(0.99, Math.exp(-0.5*(currState.depth-4))))) {
			// if (currState.depth < 10 && _flip(0.5)) {
			// if (currState.depth < 5) {
				future(function() {
					// Continue or fork?
					if (_flip(0.5)) {
					// if (false) {
						branch({
							depth: currState.depth + 1,
							pos: newbranch.end,
							angle: newbranch.angle,
							width: newbranch.width},
						newNode);
					} else {
						var branchState1 = {
							depth: currState.depth + 1,
							pos: newbranch.end,
							angle: newbranch.angle - Math.abs(_gaussian(0, Math.PI/6)),
							// angle: newbranch.angle - _uniform(0, Math.PI/4),
							width: newbranch.width
						};
						branch(branchState1, newNode);
						var branchState2 = {
							depth: currState.depth + 1,
							pos: newbranch.end,
							angle: newbranch.angle + Math.abs(_gaussian(0, Math.PI/6)),
							// angle: newbranch.angle + _uniform(0, Math.PI/4),
							width: newbranch.width
						};
						branch(branchState2, newNode);
					}
				});
			}
		});
	};

	var generate = function() {
		globalStore.treeNode = undefined;
		globalStore.branches = [];
		globalStore.bbox = box2();
		globalStore.currFeatures = [];
		var startState = {
			depth: 0,
			pos: vec2(0, 0),
			angle: -Math.PI/2,
			width: 0.75
		};
		future(function() { branch(startState, undefined); });
		finishAllFutures();

		if (!heuristicFactors) {
			// Target factor only once, at very end
			targetFactor(1);
		}

		return { branches: globalStore.branches, bbox: globalStore.bbox };
	};

	return generate;
}

var variational = true;
var heuristicFactors = false;
var futurePolicy = 'deterministic';
// var futurePolicy = 'stochastic';
setFuturePolicy(futurePolicy);
var generate = makeProgram(variational, heuristicFactors);


if (variational) {
	Variational(generate, vparams, {
		numParticles: 100,
		maxNumFlights: 300,
		convergeEps: 0.1,
		// convergeEps: 0.01,
		adagradInitLearnRate: 0.25,
		// adagradInitLearnRate: 0.1,
		// adagradInitLearnRate: 0.05,

		// gradientEstimator: 'ELBO',
		gradientEstimator: 'EUBO',
		exampleTraces: utils.loadTraces('vpf_experiments/lsystem/data/targetWidth=8.txt'),

		verbosity: {
			flightNum: true,
			scoreDiff: true,
			processRetVals: lsysUtils.processRetVals_width(targetWidth),
			endStatus: true
		}
	});
	// console.log(vparams);
}


var res = {width: 600, height: 600};
var n = 100;
var name = 'test';
var resultsDir = 'vpf_experiments/lsystem/results/' + name;
var fs = require.call(null, 'fs');
if (!fs.existsSync(resultsDir)) {
	fs.mkdirSync(resultsDir);
}
var errs = repeat(n, function(i) {
	// var ret = sample(ParticleFilter(generate, 1));
	// var ret = sample(MH(generate, 1000));
	var ret = !variational ? sample(ParticleFilter(generate, 100)) :
							 sample(ParticleFilter(generate, 1));
	var width = ret.bbox.size().x;
	var err =  Math.abs(targetWidth - width) / targetWidth;
	console.log(i + ' | width: ' + width + ', relative error: ' + err);
	if (i % 5 === 0) {
		lsysUtils.renderOut('vpf_experiments/lsystem/results/' + name + '/' + (i/5) + '.png', res, viewport, ret.branches);
	}
	return err;
});
console.log('error -  min: ' + listMin(errs) + ', max: ' + listMax(errs) +
	               ', avg: ' + listMean(errs) + ', stddev: ' + listStdev(errs));


// var dataDir = 'vpf_experiments/lsystem/data';
// var name = 'targetWidth=8';
// var fs = require.call(null, 'fs');
// if (!fs.existsSync(dataDir)) {
// 	fs.mkdirSync(dataDir);
// }
// var filename = dataDir + '/' + name + '.txt';
// var genData = function(counter) {
// 	var trace = ParticleFilter(generate, 100).trace;
// 	fs.appendFileSync(filename, JSON.stringify(trace) + '\n');
// 	console.log('Generated trace ' + counter);
// 	genData(counter + 1);
// }
// genData(0);


undefined;





