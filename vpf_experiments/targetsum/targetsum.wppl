var util = require.call(null, 'vpf_experiments/targetsum/params');
var tempSchedules = require.call(null, 'src/tempSchedules');

var targetsum = 10;
// var tightness = 0.1;
var tightness = 1;

var params = VPF.newParams();

// var _gaussian = gaussian;
var _gaussian = function(mu, sigma, prevs) {
	VPF.gaussianERP.importanceERP.setParams(util.gaussianParams(params, prevs.length, prevs));
	return sample(VPF.gaussianERP, [mu, sigma]);
}

var program = function() {
	var x1 = _gaussian(0, 5, []);
	var x2 = _gaussian(0, 5, [x1]);
	var x3 = _gaussian(0, 5, [x1, x2]);
	var sum = x1 + x2 + x3;
	factor(gaussianERP.score([targetsum, tightness], sum));
	return [x1, x2, x3];
}

VPF(program, {
	numParticles: 1000,
	maxNumFlights: 1000,
	vparams: params,
	convergeEps: 0.1,
	initLearnRate: 1,
	// tempSchedule: tempSchedules.linear,

	doResampling: false,
	objective: 'ELBO',

	verbosity: {
		flightNum: true,
		scoreDiff: true,
		// particleNum: true,
		// params: true,
		// gradientEstimate: true,
		// gradientSamples: true,
		endStatus: true
	}
});

console.log(params);

repeat(10, function() {
	var result = ParticleFilter(program, 1);
	var nums = result.MAP().val;
	console.log((nums[0]+nums[1]+nums[2]) + ': ' + JSON.stringify(nums));
});

true;